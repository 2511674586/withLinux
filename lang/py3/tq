#!/usr/bin/python3
# @ref python-cookbook
# @ref http://python3-cookbook.readthedocs.org/zh_CN/latest/c12/p14_launching_daemon_process_on_unix.html
# @file tq
# @brief Task Queue Daemon, and Client utils
# @author COPYRIGHT (C) 2016 Lumin Zhou <cdluminate@gmail.com>
# @license MIT License

import os
import sys
import socket
import select
import io
import subprocess
import time
import sqlite3
import shlex

import atexit
import signal

import logging as log
log.basicConfig(
    format='%(levelno)s %(asctime)s %(process)d %(filename)s:%(lineno)d]'
        +' %(message)s',
    level=log.DEBUG
)

def sqlite3_directexec(dbfile, request):
    conn = sqlite3.connect(dbfile)
    conn.execute(request)
    conn.commit()
    conn.close()

def sqlite3_directquery(dbfile, request):
    tq = sqlite3.connect(dbfile)
    cursor = tq.cursor()
    cursor.execute(request)
    values = cursor.fetchall() # len(values) may be 0
    cursor.close()
    tq.close()
    return values

def sql_pretty(sql):
    ret = sql
    pre = '    sqlite3 operation ...'
    prompt ='    sqlite3>  '
    prompt2='    sqlite3.. '
    ret=ret.replace('select', pre+'\n'+prompt+'select')
    ret=ret.replace('update', pre+'\n'+prompt+'update')
    ret=ret.replace('insert', pre+'\n'+prompt+'insert')
    ret=ret.replace('values', '\n'+prompt2+'values')
    ret=ret.replace('where', '\n'+prompt2+'where')
    ret=ret.replace('and', '\n'+prompt2+'and')
    ret=ret.replace('or', '\n'+prompt2+'or')
    return ret

def daemonize(*,
        uid,
        pidfile,
        stdin   = '/dev/null',
        stdout  = '/dev/null',
        stderr  = '/dev/null'):

    if os.path.exists(pidfile):
        raise RuntimeError('Already running')

    # First fork (detaches from parent)
    try:
        if os.fork() > 0:
            raise SystemExit(0)   # Parent exit
    except OSError as e:
        raise RuntimeError('fork #1 failed.')

    os.chdir('/')
    os.umask(0)
    os.setsid()
    # Second fork (relinquish session leadership)
    try:
        if os.fork() > 0:
            raise SystemExit(0)
    except OSError as e:
        raise RuntimeError('fork #2 failed.')

    # Flush I/O buffers
    sys.stdout.flush()
    sys.stderr.flush()

    # Replace file descriptors for stdin, stdout, and stderr
    with open(stdin, 'rb', 0) as f:
        os.dup2(f.fileno(), sys.stdin.fileno())
    with open(stdout, 'ab', 0) as f:
        os.dup2(f.fileno(), sys.stdout.fileno())
    with open(stderr, 'ab', 0) as f:
        os.dup2(f.fileno(), sys.stderr.fileno())

    # Write the PID file
    with open(pidfile,'w') as f:
        print(os.getpid(),file=f)

    # Arrange to have the PID file removed on exit/signal
    atexit.register(lambda: os.remove(pidfile))

    # Signal handler for termination (required)
    def sigterm_handler(signo, frame):
        log.info('recieved SIGTERM, exit.')
        raise SystemExit(1)

    signal.signal(signal.SIGTERM, sigterm_handler)

def tqd(dbfile, pidfile):
    log.info('Tqd started with pid {} uid {}'.format(os.getpid(), str(UID)))

    if not os.path.exists(dbfile):
        sql = 'create table tq (status, cwd, cmd, retval)'
        sqlite3_directexec(dbfile, sql)
    log.debug('Tqd listening on sqlite3')

    while True:

        #log.debug('    tqd check task queue in sqlite3 ...')
        sql = 'select * from tq where status is null limit 1'
        values = sqlite3_directquery(dbfile, sql)

        if len(values) > 0: # there are works to do
            #log.info('sqlite3> {}'.format(sql))
            log.info(sql_pretty(sql))
            values = values[0]
            status, cwd, cmd = values[0], values[1], values[2]
            log.info('new task detected, execute next task')
            log.info('    cwd = {}'.format(cwd))
            log.info('    cmd = {}'.format(cmd))
            # fork:
            #  worker> runnit
            #  master> save pid, waitpid, then update sqlite status
            pid = os.fork()
            if pid > 0: # parent
                log.info('    waiting for worker {}...'.format(pid))
                os.waitpid(-1, 0)

                log.info('    worker task complete, update database ...')

                sql = 'update tq set status = \'OK\''\
                    +' where (status =\'' +str(pid)+ '\')'\
                    +' and (cwd =\'' +cwd+ '\')'\
                    +' and (cmd = \'' +cmd+ '\')'\
                    +' limit 1'
                sqlite3_directexec(dbfile, sql)
                #log.info('    sqlite3> {}'.format(sql))
                log.info(sql_pretty(sql))

            else: # worker
                pid = os.getpid()
                os.chdir(cwd)

                # register child pid in sqlite3
                sql = 'update tq set status = \'' +str(pid)+ '\'' \
                    +' where (status is null)' \
                    +' and (cwd =\'' +cwd+ '\')' \
                    +' and (cmd = \'' +cmd+ '\')' \
                    +' limit 1'
                sqlite3_directexec(dbfile, sql)
                log.debug(sql_pretty(sql))

                try:
                    proc = subprocess.Popen(
                        shlex.split(cmd),
                        shell=False,
                        stdin=None,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        cwd=cwd)
                    tqout, tqerr = proc.communicate()
                    retval = proc.returncode
                except FileNotFoundError as e:
                    log.error('    {}'.format(str(e)))
                    tqout, tqerr = '', ''
                    retval = -1
                except:
                    log.error('    {}'.format('Unknown Error!'))
                    tqout, tqerr = '', ''
                    retval = -1
                finally:
                    log.info('    tq_popen done')

                os.chdir(cwd)
                if len(tqout)>0:
                    with open('tq.out', 'a+') as f:
                        f.write(tqout.decode())
                if len(tqerr)>0:
                    with open('tq.err', 'a+') as f:
                        f.write(tqerr.decode())
                sql = 'update tq set retval = \''+str(retval)+'\'' \
                    +' where (status = \''+str(pid)+'\')' \
                    +' and (cwd =\'' +cwd+ '\')' \
                    +' and (cmd = \'' +cmd+ '\')' \
                    +' limit 1'
                log.debug(sql_pretty(sql))
                sqlite3_directexec(dbfile, sql)
                os._exit(0) # don't remove pidfile! i.e. don't trigger atexit().
        else:
            # there is nothing to do in the queue, just sleep
            # log.debug('    tqd task queue empty ...')
            time.sleep(1)

def Usage (argv0):
    print('Usage: {} {{COMMAND | -- TASK}}'.format(sys.argv[0]), file=sys.stderr)
    print()
    print('          -> show usage, and tqd status')
    print('  start   -> start daemon')
    print('  stop    -> stop daemon')
    print('  log     -> dump daemon log to screen')
    print('  ls      -> show current task queue and status')
    print('  clean   -> remove log file, clean task queue')
    print('  purge   -> remove log file and sqlite3 db file')
    print('  -- TASK -> assign TASK (a command line)')
    print()
    print('tq version: 0.0c')

if __name__ == '__main__':

    UID = os.getuid()
    PIDFILE = '/tmp/tqd_{}.pid'.format(str(UID))
    LOGFILE = '/tmp/tqd_{}.log'.format(str(UID))
    SQLITE  = '/tmp/tqd_{}.db'.format(str(UID))

    if len(sys.argv) < 2:
        Usage(sys.argv[0])
        print()
        if os.path.exists(PIDFILE):
            print('tqd is \x1b[32;1mrunning\x1b[m.')
        else:
            print('tqd is \x1b[31;1mnot running\x1b[m.')
        raise SystemExit(1)

    if sys.argv[1] == 'start':
        log.info('starting Tqd ...')
        try:
            daemonize(uid=UID,
                      pidfile=PIDFILE,
                      stdout=LOGFILE,
                      stderr=LOGFILE)
        except RuntimeError as e:
            print(e, file=sys.stderr)
            raise SystemExit(1)

        tqd(SQLITE, PIDFILE)

    elif sys.argv[1] == 'stop':
        if os.path.exists(PIDFILE):
            with open(PIDFILE) as f:
                os.kill(int(f.read()), signal.SIGTERM)
        else:
            log.info('Tqd is NOT running')
            raise SystemExit(1)
    
    elif sys.argv[1] == 'log':
        if os.path.exists(LOGFILE):
            with open(LOGFILE, 'r') as log:
                print(log.read())

    elif sys.argv[1] == 'clean' or sys.argv[1] == 'purge':
        # clean task queue
        if sys.argv[1] == 'clean':
            if os.path.exists(SQLITE):
                sql = 'delete from tq where status = \'OK\''
                sqlite3_directexec(SQLITE, sql)
        # file removal
        if not os.path.exists(PIDFILE):
            if os.path.exists(LOGFILE):
                os.unlink(LOGFILE)
            if os.path.exists(LOGFILE):
                os.unlink(LOGFILE)
            if sys.argv[1] == 'purge':
                if os.path.exists(SQLITE):
                    os.unlink(SQLITE)

    elif sys.argv[1] == 'ls':
        if not os.path.exists(PIDFILE):
            log.error('Tqd is not running.')
        elif os.path.exists(SQLITE):
            sql = 'select * from tq'
            values = sqlite3_directquery(SQLITE, sql)
            for item in values:
                print (item)

    elif sys.argv[1] == '--':
        cwd = os.getcwd()
        cmd = ' '.join(sys.argv[2:])
        #log.info('    {} {}'.format(cwd, cmd))
        if len(cmd)==0:
            log.error('Task missing')
            raise SystemExit(1)

        if not os.path.exists(PIDFILE):
            log.error('Tqd is not running.')
        else:
            sql = 'insert into tq (cwd, cmd) ' \
                'values (\'' +cwd+ '\',\'' +cmd+ '\')'
            sqlite3_directexec(SQLITE, sql)
        log.info(sql_pretty(sql))

    else:
        log.error('Unknown command {!r}'.format(sys.argv[1]))
        raise SystemExit(1)
