#!/bin/sh
# Maintainer script for withlinux
# COPYRIGHT (C) 2016 Lumin Zhou, MIT License
set -e

Usage () {
printf "%s" "[m"
cat << EOF
usage: $0 <action>
actions:
  scan  scan for files missing in README.md
  stat  statistic lines in all plain files, also dumps all plain files
  make  run the main target of Makefile, compile all sources
  clean run the clean target of Makefile, clean all unnecessary files
  undel undelete "deleted" files
EOF
echo
printf "Project withlinux has %s%d%s files currently.\n" "[34;1m" $files "[;0m"
printf "Project withlinux has %s%d%s lines currently.\n" "[33;1m" $lines "[;0m"
printf "Project withlinux occupies %s%s%s of disk space.\n" "[36;1m" $sizes "[;0m"
}

scan_missing () {
  local SCAN="README.md"
  local FILES="$(find . | grep -v '.git')"
  
  for ITEM in ${FILES}; do
    if [ -f ${ITEM} ]; then
      if ! grep "${ITEM})" ${SCAN} 2>&1 1>/dev/null; then
        printf "[%s] is not referenced in [%s].\n" ${ITEM} ${SCAN}
      fi
    else
      #printf "%s is not a regular file, skip...\n" ${ITEM}
  	continue
    fi
  done
}

stat_lines () {
  find . -path ./.git -prune -o -name '*.pdf' -prune -o -type f -exec cat -n {} +
}

undelete () {
  local targets="$(git status --short | grep '^ D' | awk '{print $2}' | sed -e 's/\n/ /g')"
  for ITEM in $targets; do
    printf "I: undelete %s\n" $ITEM
    git checkout $ITEM;
  done
}

# get some data first 
lines=$(stat_lines | tail -n1 | awk '{print $1}' | sed -e 's/\n//g')
files=$(find . -path ./.git -prune -o -name '*.pdf' -prune -o -type f -print | nl | tail -n1 | awk '{print $1}' | sed -e 's/\n//g')
sizes=$(du -sh . | awk '{print $1}' | sed -e 's/\n//g')

main () {
  # detect arg
  if [ -z $1 ]; then
    Usage
    git status --short
    exit 1
  fi
  
  # invoke sub scripts
  case $1 in
    scan   ) scan_missing ;;
    stat   ) stat_lines | tail ;;
    make   ) make ;;
	clean  ) make clean ;;
    undel  ) undelete ;;
    help   ) Usage ;;
       *   ) echo "E: invalid action" ;;
  esac
}
main $@
